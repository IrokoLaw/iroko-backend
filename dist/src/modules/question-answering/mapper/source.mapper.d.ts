import { Mapper } from '@/libs/domain/mapper.interface';
import { z } from 'zod';
import { SourceDbEntity } from '../infrastructure/persistance/source.entity.db';
import { SourceResponseDto } from '../dtos/source.response.dto';
import { BlocEnum } from '../domain/values-objects/source-bloc-value-object';
import { ActionEnum } from '../domain/values-objects/text-action-object-value';
import { StatusEnum } from '../domain/values-objects/text-status-value-object';
import { SourceEntity } from '../domain/entities/source/source.entity';
import { LegalTextTypeEnum } from '../domain/values-objects/legal-text-type-value-object';
export declare const sourceSchema: z.ZodObject<{
    id: z.ZodString;
    createdAt: z.ZodEffects<z.ZodDate, Date, unknown>;
    updatedAt: z.ZodEffects<z.ZodDate, Date, unknown>;
    legalTextName: z.ZodDefault<z.ZodString>;
    bloc: z.ZodNativeEnum<typeof BlocEnum>;
    status: z.ZodNativeEnum<typeof StatusEnum>;
    legalTextType: z.ZodNativeEnum<typeof LegalTextTypeEnum>;
    action: z.ZodNativeEnum<typeof ActionEnum>;
    book: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    title: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    titleNumber: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    chapter: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    chapterNumber: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    section: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    sectionNumber: z.ZodDefault<z.ZodOptional<z.ZodString>>;
    articleNumber: z.ZodDefault<z.ZodString>;
    text: z.ZodDefault<z.ZodString>;
    pathDoc: z.ZodDefault<z.ZodString>;
    pathMetadata: z.ZodDefault<z.ZodString>;
    chatId: z.ZodString;
}, "strip", z.ZodTypeAny, {
    title?: string;
    id?: string;
    createdAt?: Date;
    updatedAt?: Date;
    text?: string;
    status?: StatusEnum;
    legalTextName?: string;
    bloc?: BlocEnum;
    legalTextType?: LegalTextTypeEnum;
    action?: ActionEnum;
    book?: string;
    titleNumber?: string;
    chapter?: string;
    chapterNumber?: string;
    section?: string;
    sectionNumber?: string;
    articleNumber?: string;
    pathDoc?: string;
    pathMetadata?: string;
    chatId?: string;
}, {
    title?: string;
    id?: string;
    createdAt?: unknown;
    updatedAt?: unknown;
    text?: string;
    status?: StatusEnum;
    legalTextName?: string;
    bloc?: BlocEnum;
    legalTextType?: LegalTextTypeEnum;
    action?: ActionEnum;
    book?: string;
    titleNumber?: string;
    chapter?: string;
    chapterNumber?: string;
    section?: string;
    sectionNumber?: string;
    articleNumber?: string;
    pathDoc?: string;
    pathMetadata?: string;
    chatId?: string;
}>;
export type SourceModel = z.TypeOf<typeof sourceSchema>;
export declare class SourceMapper implements Mapper<SourceEntity, SourceModel, SourceResponseDto> {
    toDomain(dbEntity: SourceDbEntity): SourceEntity;
    toPersistence(domainEntity: SourceEntity): SourceDbEntity;
    toResponse(domainEntity: SourceEntity): SourceResponseDto;
}
